//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/playerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerInputs"",
    ""maps"": [
        {
            ""name"": ""Controller"",
            ""id"": ""426317b6-682a-4bdd-8271-91663aea50e1"",
            ""actions"": [
                {
                    ""name"": ""UoR"",
                    ""type"": ""Button"",
                    ""id"": ""a704aa73-b75f-4c04-8043-0b685626eed9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoD"",
                    ""type"": ""Button"",
                    ""id"": ""7799eaed-bd45-46c9-901b-89af1a159a36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SoT"",
                    ""type"": ""Button"",
                    ""id"": ""6fb261da-3cae-4792-b356-852ba16985cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CoC"",
                    ""type"": ""Button"",
                    ""id"": ""390efaa6-aca3-4e67-94fd-edf42c4b02fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LTs"",
                    ""type"": ""Button"",
                    ""id"": ""478d6a5d-903f-4dcc-a507-460c4f2d364d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RTs"",
                    ""type"": ""Button"",
                    ""id"": ""8e2a23e6-b6ad-4fbd-84fb-fffae12974c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f86731cb-a92a-439c-986a-2a3e95b116c0"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UoR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e34659e0-1150-4e1c-b534-40d1e80233b3"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UoR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79704204-cc99-4299-a66b-f03b9bf45684"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8587778b-505c-47a9-a3cf-ad1778912b23"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""755c3284-02d4-4648-ba1a-5396edee36ce"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SoT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""141463e2-2692-40b7-8bd5-7250e7759e3e"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SoT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dce30a63-dae3-4817-9e5a-b30efbcfa841"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CoC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79707948-fbde-425e-b782-f485ff478cde"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CoC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""668c89a2-a382-45fd-bd8e-d16ead597501"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LTs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68c42601-29a8-4082-b78c-920ca8d349e0"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LTs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bc1da12-9273-496a-b7e8-0c837c921031"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RTs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""983cf0e7-7d6d-46d5-b8ad-499bc431c2fb"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RTs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIController"",
            ""id"": ""cf42c472-5570-413d-8738-6b563b0b1b0d"",
            ""actions"": [
                {
                    ""name"": ""joystickL"",
                    ""type"": ""Button"",
                    ""id"": ""8e049a18-5604-47fb-9fff-8dd372e7072a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""validate"",
                    ""type"": ""Button"",
                    ""id"": ""894e9db1-6f55-4347-916d-1248509d350b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""return"",
                    ""type"": ""Button"",
                    ""id"": ""a6849f66-59f4-4b53-94e0-7b4a4198458a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left"",
                    ""id"": ""4abe54ce-97e4-4280-80ae-e9f3841acf7a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""joystickL"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""17f7b1c3-53ff-487f-ab40-c26ab9fd90ba"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""joystickL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a84c0c45-0711-4627-b4f6-c5a1248cd3d5"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""joystickL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""arrows"",
                    ""id"": ""64466f0d-522d-4c26-9cdc-592f43817d68"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""joystickL"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0cb18e60-bba0-4282-83f5-0be512dcad15"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""joystickL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7c80b407-e5c0-4a74-b9cc-6b7fb467278a"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""joystickL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""32d0c844-54b0-455f-aa9f-82fd9e465130"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""validate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b86078a9-f0c1-4f41-af4a-c2d1e29057cb"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_UoR = m_Controller.FindAction("UoR", throwIfNotFound: true);
        m_Controller_LoD = m_Controller.FindAction("LoD", throwIfNotFound: true);
        m_Controller_SoT = m_Controller.FindAction("SoT", throwIfNotFound: true);
        m_Controller_CoC = m_Controller.FindAction("CoC", throwIfNotFound: true);
        m_Controller_LTs = m_Controller.FindAction("LTs", throwIfNotFound: true);
        m_Controller_RTs = m_Controller.FindAction("RTs", throwIfNotFound: true);
        // UIController
        m_UIController = asset.FindActionMap("UIController", throwIfNotFound: true);
        m_UIController_joystickL = m_UIController.FindAction("joystickL", throwIfNotFound: true);
        m_UIController_validate = m_UIController.FindAction("validate", throwIfNotFound: true);
        m_UIController_return = m_UIController.FindAction("return", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controller
    private readonly InputActionMap m_Controller;
    private IControllerActions m_ControllerActionsCallbackInterface;
    private readonly InputAction m_Controller_UoR;
    private readonly InputAction m_Controller_LoD;
    private readonly InputAction m_Controller_SoT;
    private readonly InputAction m_Controller_CoC;
    private readonly InputAction m_Controller_LTs;
    private readonly InputAction m_Controller_RTs;
    public struct ControllerActions
    {
        private @PlayerInputs m_Wrapper;
        public ControllerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @UoR => m_Wrapper.m_Controller_UoR;
        public InputAction @LoD => m_Wrapper.m_Controller_LoD;
        public InputAction @SoT => m_Wrapper.m_Controller_SoT;
        public InputAction @CoC => m_Wrapper.m_Controller_CoC;
        public InputAction @LTs => m_Wrapper.m_Controller_LTs;
        public InputAction @RTs => m_Wrapper.m_Controller_RTs;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void SetCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterface != null)
            {
                @UoR.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnUoR;
                @UoR.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnUoR;
                @UoR.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnUoR;
                @LoD.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLoD;
                @LoD.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLoD;
                @LoD.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLoD;
                @SoT.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSoT;
                @SoT.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSoT;
                @SoT.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSoT;
                @CoC.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCoC;
                @CoC.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCoC;
                @CoC.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnCoC;
                @LTs.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLTs;
                @LTs.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLTs;
                @LTs.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLTs;
                @RTs.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRTs;
                @RTs.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRTs;
                @RTs.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRTs;
            }
            m_Wrapper.m_ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UoR.started += instance.OnUoR;
                @UoR.performed += instance.OnUoR;
                @UoR.canceled += instance.OnUoR;
                @LoD.started += instance.OnLoD;
                @LoD.performed += instance.OnLoD;
                @LoD.canceled += instance.OnLoD;
                @SoT.started += instance.OnSoT;
                @SoT.performed += instance.OnSoT;
                @SoT.canceled += instance.OnSoT;
                @CoC.started += instance.OnCoC;
                @CoC.performed += instance.OnCoC;
                @CoC.canceled += instance.OnCoC;
                @LTs.started += instance.OnLTs;
                @LTs.performed += instance.OnLTs;
                @LTs.canceled += instance.OnLTs;
                @RTs.started += instance.OnRTs;
                @RTs.performed += instance.OnRTs;
                @RTs.canceled += instance.OnRTs;
            }
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);

    // UIController
    private readonly InputActionMap m_UIController;
    private IUIControllerActions m_UIControllerActionsCallbackInterface;
    private readonly InputAction m_UIController_joystickL;
    private readonly InputAction m_UIController_validate;
    private readonly InputAction m_UIController_return;
    public struct UIControllerActions
    {
        private @PlayerInputs m_Wrapper;
        public UIControllerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @joystickL => m_Wrapper.m_UIController_joystickL;
        public InputAction @validate => m_Wrapper.m_UIController_validate;
        public InputAction @return => m_Wrapper.m_UIController_return;
        public InputActionMap Get() { return m_Wrapper.m_UIController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControllerActions set) { return set.Get(); }
        public void SetCallbacks(IUIControllerActions instance)
        {
            if (m_Wrapper.m_UIControllerActionsCallbackInterface != null)
            {
                @joystickL.started -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnJoystickL;
                @joystickL.performed -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnJoystickL;
                @joystickL.canceled -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnJoystickL;
                @validate.started -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnValidate;
                @validate.performed -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnValidate;
                @validate.canceled -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnValidate;
                @return.started -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnReturn;
                @return.performed -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnReturn;
                @return.canceled -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnReturn;
            }
            m_Wrapper.m_UIControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @joystickL.started += instance.OnJoystickL;
                @joystickL.performed += instance.OnJoystickL;
                @joystickL.canceled += instance.OnJoystickL;
                @validate.started += instance.OnValidate;
                @validate.performed += instance.OnValidate;
                @validate.canceled += instance.OnValidate;
                @return.started += instance.OnReturn;
                @return.performed += instance.OnReturn;
                @return.canceled += instance.OnReturn;
            }
        }
    }
    public UIControllerActions @UIController => new UIControllerActions(this);
    public interface IControllerActions
    {
        void OnUoR(InputAction.CallbackContext context);
        void OnLoD(InputAction.CallbackContext context);
        void OnSoT(InputAction.CallbackContext context);
        void OnCoC(InputAction.CallbackContext context);
        void OnLTs(InputAction.CallbackContext context);
        void OnRTs(InputAction.CallbackContext context);
    }
    public interface IUIControllerActions
    {
        void OnJoystickL(InputAction.CallbackContext context);
        void OnValidate(InputAction.CallbackContext context);
        void OnReturn(InputAction.CallbackContext context);
    }
}
